import extension Array2dExtension

private static final char VOID = `.`
List<char> grid = []
Map antennas = [:].withDefault(true) { [] as List } // grouped by frequency
for (String line in Files.readLines('input.txt')) {
  Array2dExtension.width = line.size()
  for (int x in 0..<line.size()) {
    char c = line[x]
    grid << c
    if (c != VOID) antennas.getAt<List>(c).add(new Point(x, Array2dExtension.height))
  }
  Array2dExtension.height++
}
Set antiNodesPt1 = []
Set antiNodesPt2 = []
for ((char frequency, List group) in antennas) {
  for (List pair in uniquePairCombinations(group)) {
    def (Point p1, Point p2) = pair
    Point vector = p2 - p1
    // part 1
    for (Point candidate in [p1 + vector * 2, p2 - vector * 2]) {
      if (grid?[candidate] != null) antiNodesPt1 << candidate
    }
    // part 2
    for (Point interest in pair) {
      for (Point direction in [vector, - vector]) {
        Point candidate = interest
        while (grid?[candidate = candidate + direction] != null) antiNodesPt2 << candidate
      }
    }
  }
}

println("Part 1: ${antiNodesPt1.size()}")
println("Part 1: ${antiNodesPt2.size()}")

fun List uniquePairCombinations(List points) {
  List combinations = []
  for (int i in 0..<points.size()) {
    for (int j in 0..<i) {
      if (i != j) combinations << ([points[i], points[j]] as List)
    }
  }
  return combinations
}

@data
class Point {
  int x
  int y
  constructor(this.x, this.y)

  fun Point negate() -> new Point(- x, - y)
  fun Point plus(Point p) -> new Point(x + p.x, y + p.y)
  fun Point minus(Point p) -> new Point(x - p.x, y - p.y)
  fun Point multiply(int i) -> new Point(x * i, y * i)
}

extension class Array2dExtension for List<char> {
  static int width
  static int height = 0
  fun char getAt(int x, int y) -> this[y * width + x]
  fun char get(Point p) -> this[p.x, p.y]
  fun Character getAtSafe(Point p) -> this?[p.x, p.y]
  fun Character getAtSafe(int x, int y) -> x >= 0 && x < width && y >= 0 && y < height
    ? this[y * width + x]
    : null
}
