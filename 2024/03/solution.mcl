import java.util.regex.Pattern
import java.util.regex.Matcher

private static final Pattern MUL_PATTERN = r/mul\((\d{1,3})\,(\d{1,3})\)/;
private static final Pattern MUL_PATTERN_START = Pattern.compile("^$MUL_PATTERN")
private static final int DO_MODE = 1
private static final int DONT_MODE = 0
private static final String DO = "do()"
private static final String DONT = "don't()"

String input = new File('input.txt').readText()

// part 1
Matcher matcher = input =~ MUL_PATTERN
int result = 0
while (matcher) {
  result += matcher.group(1).toInt() * matcher.group(2).toInt()
}
println("Part 1: $result")

// part 2
result = 0
int mode = DO_MODE
for (int i in 0..<input.size()) {
  if (input?[i..<(i+DO.size())] == DO) {
     mode = DO_MODE
  } else if (input?[i..<(i+DONT.size())] == DONT) {
    mode = DONT_MODE
  } else if (mode == DO_MODE) {
    // could be optimized but it still runs fast
    if (Matcher m = input.substring(i) =~ MUL_PATTERN_START) {
      result += m.group(1).toInt() * m.group(2).toInt()
    }
  }
}
println("Part 2: $result")


