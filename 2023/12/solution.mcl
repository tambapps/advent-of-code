static final char OPERATIONAL = `.`
static final char DAMAGED = `#`

int sum = 0
for (String line in Files.readLines('input.txt')) {
  def (String arrangementStr, String expectedStr) = line.split(' ')
  List arrangement = toArrangement(arrangementStr)
  List<int> expected = [for String it in expectedStr.split(',') -> it.toInt()]
  for (List combination in arrangement.combinations()) {
    if (satisfies(combination, expected)) sum++
  }
}

println("Part 1: $sum")

fun bool satisfies(List combination, List<int> expected) {
  List parts = [for String it in combination.join().split('\\.+', -1) if !it.isEmpty()]
  if (parts.size() != expected.size()) return false
  for (int i in 0..<expected.size()) {
    if (parts.get<String>(i).length() != expected[i]) return false
  }
  return true
}

// list of list, for combination generation
fun List toArrangement(String str) {
  List arr = []
  for (char c in str) {
    arr << ((c == `?` ? [OPERATIONAL, DAMAGED] : [c]) as List)
  }
  return arr
}