private int i = 0
private BufferedReader reader = Files.reader('input.txt')

private List<long> seeds = parseSeeds()
private RangeMap seedToSoilMap = parseMap()
private RangeMap soilToFertilizer = parseMap()
private RangeMap fertilizerToWater = parseMap()
private RangeMap waterToLight = parseMap()
private RangeMap lightToTemperature = parseMap()
private RangeMap temperatureToHumidity = parseMap()
private RangeMap humidityToLocation = parseMap()

println("Part 1: value=" + [for long seed in seeds -> findLocation(seed)].min())

long min = Long.MAX_VALUE
for (int i in 0..<(seeds.size() / 2)) {
  long start = seeds[i * 2]
  long end = start + seeds[i * 2 + 1] - 1
  for (long j in start..end) {
    long potential = findLocation(j)
    min = min > potential ? potential : min
  }
}
println("Part 2: value=" + min)

reader.close()

fun long findLocation(long seed) -> humidityToLocation[
  temperatureToHumidity[
    lightToTemperature[
      waterToLight[
        fertilizerToWater[
          soilToFertilizer[
            seedToSoilMap[
              seed
            ]
          ]
        ]
      ]
    ]
  ]
]

fun List<long> parseSeeds() {
  String line = next()
  List<long> l = [for String it in line.substring(line.indexOf(':') + 1).trim().split(' ') -> it.toLong()]
  next(); next();
  return l
}
fun RangeMap parseMap() {
  RangeMap map = new RangeMap()
  while (String line = next()) {
    def (long destRangeStart, long sourceRangeStart, long rangeLength) = [for String it in line.split(' ') -> it.toLong()]
    map.add(new RangeMapping(destRangeStart, sourceRangeStart, rangeLength))
  }
  next() // skip next useless line
  return map
}

fun String next() -> reader.readLine()

class RangeMapping {
  long destRangeStart
  long sourceRangeStart
  long sourceRangeEnd

  constructor(this.destRangeStart, this.sourceRangeStart, long rangeLength) {
    this.sourceRangeEnd = sourceRangeStart + rangeLength - 1
  }

  override fun String toString() -> "$sourceRangeStart to $sourceRangeEnd. DestStart $destRangeStart"
}

class RangeMap {
  List mappings = []

  fun void add(RangeMapping mapping) {
    int i = 0
    while (i < mappings.size() && mappings.get<RangeMapping>(i).sourceRangeStart < mapping.sourceRangeStart) i++
    mappings.add(i, mapping)
  }

  fun long getAt(long seed) {
    for (RangeMapping mapping in mappings) {
      if (mapping.sourceRangeStart <= seed && seed <= mapping.sourceRangeEnd) {
        return mapping.destRangeStart + (seed - mapping.sourceRangeStart)
      } else if (mapping.sourceRangeStart > seed) return seed
    }
    return seed
  }
}