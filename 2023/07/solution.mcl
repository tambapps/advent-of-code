

List hands = []
for (String line in new File('input.txt').readLines()) {
  def (String value, String bidStr) = line.split(' ')
   hands << new Hand(value, bidStr.toLong())
}
hands.sort()
println(hands)

long sum = 0
for (int i in 0..<hands.length) sum += (i + 1) * (hands[i] as Hand).bid
println("Part 1: value=$sum")

class Hand implements Comparable {
  private static final set<int> FOUR_OF_A_KIND_COUNTS = [4, 1]
  private static final set<int> FULL_HOUSE_COUNTS = [3, 2]
  private static final set<int> THREE_OF_A_KIND_COUNTS = [3, 1, 1]
  private static final set<int> TWO_PAIR_COUNTS = [2, 2, 1]
  private static final Map CARD_ORDER = [
    `A`:13,
    `K`:12,
    `Q`:11,
    `J`:10,
    `T`: 9,
    `9`: 8,
    `8`: 7,
    `7`: 6,
    `6`: 5,
    `5`: 4,
    `4`: 3,
    `3`: 2,
    `2`: 1,
  ]

  String value
  long bid
  constructor(this.value, this.bid)

  fun int compareTo(Hand h) {
    int c = strength - h.strength
    if (c != 0) return c
    for (int i in 0..<5) {
      c = (CARD_ORDER[value[i]] as int) - (CARD_ORDER[h.value[i]] as int)
      if (c != 0) return c
    }
    throw new RuntimeException()
  }

  fun int getStrength() {
    Map occMap = [:].withDefault { 0 }
    for (char c in value) occMap[c] = occMap[c] as int + 1
    int size = occMap.size()
    set<int> counts = occMap.values().toIntSet()
    return switch(size) {
      1 -> 7
      2 -> switch(counts) {
        FOUR_OF_A_KIND_COUNTS -> 6
        FULL_HOUSE_COUNTS -> 5
        else -> throw new RuntimeException() // shouldn't happen
      }
      3 -> switch(counts) {
        THREE_OF_A_KIND_COUNTS -> 4
        TWO_PAIR_COUNTS -> 3
        else -> throw new RuntimeException() // shouldn't happen
      }
      4 -> 2
      5 -> 1
      else -> throw new RuntimeException() // shouldn't happen
    }
  }

  fun String toString() -> "$value $strength"
}