static final Map CARD_ORDER = [`A`:13, `K`:12, `Q`:11, `J`:10, `T`: 9, `9`: 8,
  `8`: 7, `7`: 6, `6`: 5, `5`: 4, `4`: 3, `3`: 2, `2`: 1]
static final set<int> FOUR_OF_A_KIND_COUNTS = [4, 1]
static final set<int> THREE_OF_A_KIND_COUNTS = [3, 1] // actually for combination 3, 1, 1
// these below constants just random numbers. only the order matters
static final int FIVE_OF_A_KIND = 7
static final int FOUR_OF_A_KIND = 6
static final int FULL_HOUSE = 5
static final int THREE_OF_A_KIND = 4
static final int TWO_PAIR = 3
static final int ONE_PAIR = 2
static final int HIGH_CARD = 1

@comparable
class Hand {
  int strength
  list<int> cardValues
  @comparable.Exclude
  String value
  @comparable.Exclude
  int bid
  constructor(this.value, this.strength, this.cardValues, this.bid)
}

List hands = []
List hands2 = []
for (String line in new File('input.txt').readLines()) {
  def (String value, String bidStr) = line.split(' ')
  list<int> cardValues = value.toList().mapToInt { CARD_ORDER[it] }
  hands << new Hand(value, strength(value), cardValues, bidStr.toInt())

  list<int> cardValues2 = value.toList().mapToInt { it == `J` ? 0 : CARD_ORDER[it] } // J has lowest priority
  hands2 << new Hand(value, strength2(value), cardValues2, bidStr.toInt())
}
println("Part 1: value=" + totalWinnings(hands))
println("Part 2: value=" + totalWinnings(hands2))

fun int totalWinnings(List hands) {
  hands.sort()
  int sum = 0
  for (int i in 0..<hands.size()) sum += (i + 1) * hands.get<Hand>(i).bid
  return sum
}

fun int strength(String value) -> doComputeStrength(computeOccMap(value))

fun int strength2(String value) {
  Map occMap = computeOccMap(value)
  if (occMap == [`J`: 5]) return doComputeStrength([`A`: 5])
  int jokerCount = occMap[`J`]
  occMap.remove(`J`)
  for (int _ in 0..<jokerCount) {
    Map$Entry entry = occMap.entrySet().max { Map$Entry it -> it.value }
    occMap[entry.key] = occMap[entry.key] as int + 1
  }
  return doComputeStrength(occMap)
}

fun Map computeOccMap(String value) {
  Map occMap = [:].withDefault { 0 }
  for (char c in value) occMap[c] = occMap[c] as int + 1
  return occMap
}

fun int doComputeStrength(Map occMap) {
  int size = occMap.size()
  set<int> counts = occMap.values().toIntSet()
  return switch(size) {
    1 -> FIVE_OF_A_KIND
    2 -> switch(counts) {
      FOUR_OF_A_KIND_COUNTS -> FOUR_OF_A_KIND
      else -> FULL_HOUSE
    }
    3 -> switch(counts) {
      THREE_OF_A_KIND_COUNTS -> THREE_OF_A_KIND
      else -> TWO_PAIR
    }
    4 -> ONE_PAIR
    else -> HIGH_CARD
  }
}