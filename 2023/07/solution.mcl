static final Map CARD_ORDER = [`A`:13, `K`:12, `Q`:11, `J`:10, `T`: 9, `9`: 8,
  `8`: 7, `7`: 6, `6`: 5, `5`: 4, `4`: 3, `3`: 2, `2`: 1,]

private List hands = []

for (String line in new File('input.txt').readLines()) {
  def (String value, String bidStr) = line.split(' ')
  list<int> cardValues = value.toCharList().mapToInt { CARD_ORDER[it] }
  list<int> cardValues2 = value.toCharList().mapToInt { it == `J` ? 0 : CARD_ORDER[it] } // J has lowest priority
  hands << new Hand(value, cardValues, cardValues2, bidStr.toInt())
}

Comparator part1Comparator = { Hand h1, Hand h2 ->
  int c = h1.strength - h2.strength
  if (c != 0) return c
  for (int i in 0..<5) {
    c = h1.cardValues[i] - h2.cardValues[i]
    if (c != 0) return c
  }
  return 0
}
int sum1 = compute(part1Comparator)
println("Part 1: value=$sum1")

Comparator part2Comparator = { Hand h1, Hand h2 ->
  int c = h1.strength2 - h2.strength2
  if (c != 0) return c
  for (int i in 0..<5) {
    c = h1.cardValues2[i] - h2.cardValues2[i]
    if (c != 0) return c
  }
  return 0
}
int sum2 = compute(part2Comparator)
println("Part 2: value=$sum2")

fun int compute(Comparator comparator) {
  hands.sort(comparator)
  int sum = 0
  for (int i in 0..<hands.length) sum += (i + 1) * (hands[i] as Hand).bid
  return sum
}

class Hand {
  private static final set<int> FOUR_OF_A_KIND_COUNTS = [4, 1]
  private static final set<int> THREE_OF_A_KIND_COUNTS = [3, 1, 1]

  String value
  list<int> cardValues
  list<int> cardValues2
  int bid
  int strength
  int strength2
  constructor(this.value, this.cardValues, this.cardValues2, this.bid) {
    this.strength = computeStrength()
    this.strength2 = computeStrength2()
  }

  fun int computeStrength2() {
    Map occMap = computeOccMap()
    if (occMap == [`J`: 5]) return doComputeStrength([`A`: 5])
    int jokerCount = occMap[`J`]
    occMap.remove(`J`)
    for (int _ in 0..<jokerCount) {
      Map$Entry entry = occMap.entrySet().max { Map$Entry it -> it.value }
      occMap[entry.key] = occMap[entry.key] as int + 1
    }
    return doComputeStrength(occMap)
  }

  fun int computeStrength() -> doComputeStrength(computeOccMap())

  private fun Map computeOccMap() {
    Map occMap = [:].withDefault { 0 }
    for (char c in value) occMap[c] = occMap[c] as int + 1
    return occMap
  }

  private fun int doComputeStrength(Map occMap) {
    int size = occMap.size()
    set<int> counts = occMap.values().toIntSet()
    return switch(size) {
      1 -> 7
      2 -> switch(counts) {
        FOUR_OF_A_KIND_COUNTS -> 6
        else -> 5
      }
      3 -> switch(counts) {
        THREE_OF_A_KIND_COUNTS -> 4
        else -> 3
      }
      4 -> 2
      else -> 1
    }
  }
}