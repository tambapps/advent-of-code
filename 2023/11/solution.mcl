static final char GALAXY = `#`

private Map grid
private long width
private long height

@data
class Position {
  long x
  long y
  constructor(this.x, this.y)
}

println("Part 1: " + execute(1l))
println("Part 2: " + execute(1000000l - 1l))

fun long execute(long expandBy) {
  initGrid()
  expandRows(expandBy)
  expandColumns(expandBy)

  List galaxies = grid.keySet().toList()

  List pairs = []
  for (int i in 0..<galaxies.size()) {
    for (int j in 0..<i) {
      pairs << ([galaxies[i], galaxies[j]] as List)
    }
  }
  long sum = 0
  for (List pair in pairs) {
    def (Position g1, Position g2) = pair
    sum += distance(g1, g2)
  }
  return sum
}

fun void initGrid() {
  grid = [:]
  List lines = new File('input.txt').readLines()
  width = lines.getFirst<String>().length()
  height = lines.size()
  for (int y in 0..<height) {
    String line = lines[y]
    for (int x in 0..<width) {
      if (line[x] == GALAXY) grid[new Position(x as long, y as long)] = GALAXY
    }
  }
}

fun void expandRows(long expandBy) {
  Map grid2 = [:]
  grid2.putAll(grid)
  long newHeight = height
  for (long y in (height - 1)..0l) {
    if (grid.keySet().none { Position it -> it.y == y }) {
      for (Position pos in grid2.keySet().toList()) { // copying to avoid concurrent modification exception
        if (pos.y > y) {
          grid2.remove(pos)
          grid2[new Position(pos.x, pos.y + expandBy)] = GALAXY
        }
      }
      newHeight+= expandBy
    }
  }
  grid = grid2
  height = newHeight
}

fun void expandColumns(long expandBy) {
  Map grid2 = [:]
  grid2.putAll(grid)
  long newWidth = width
  for (long x in (width - 1)..0l) {
    if (grid.keySet().none { Position it -> it.x == x }) {
      for (Position pos in grid2.keySet().toList()) { // copying to avoid concurrent modification exception
        if (pos.x > x) {
          grid2.remove(pos)
          grid2[new Position(pos.x + expandBy, pos.y)] = GALAXY
        }
      }
      newWidth+= expandBy
    }
  }
  grid = grid2
  width = newWidth
}

fun long distance(Position start, Position end) -> abs(end.x - start.x) + abs(end.y - start.y)
fun long abs(long a) -> a >= 0 ? a : - a

// for debug purpose
fun String toString() {
  StringBuilder builder = new StringBuilder()
  for (long y in 0..<height) {
    for (long x in 0..<width) {
      builder.append(grid[new Position(x, y)] ?: `.`)
    }
    builder.append('\n')
  }
  return builder.toString()
}