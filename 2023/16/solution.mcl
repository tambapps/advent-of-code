static final char VERTICAL = `|`
static final char HORIZONTAL = `-`
static final char DIAG_LR = `\\`
static final char DIAG_RL = `/`

private list<char> list = []
private int width
private int height

for (String line in new File('input.txt').readLines()) {
  if (width == 0) width = line.length()
  list << line
  height++
}

private Set beamHistory = []
// x=-1 because we start by moving in our implementation
private List beams = [new Beam(x: -1, y: 0, direction: Beam.RIGHT)]

while (!beams.isEmpty()) {
  for (int i = 0; i < beams.size(); i++) {
    Beam b = beams[i]
    b.move()
    if ((b.x < 0 || b.x >= width || b.y < 0 || b.y >= height) // out of bounds
      || !(beamHistory << b.copy())) {
      beams.remove(i--)
      continue
    }
    switch(this[b]) {
      VERTICAL, HORIZONTAL -> {
        if ((b.direction == Beam.LEFT || b.direction == Beam.RIGHT) && this[b] == VERTICAL
          || (b.direction == Beam.UP || b.direction == Beam.DOWN) && this[b] == HORIZONTAL) {
          Beam b2 = b.copy()
          b.rotateClockwise()
          b2.rotateAntiClockwise()
          if (beamHistory << b2.copy()) {
            beams << b2
          }
        }
      }
      DIAG_LR -> if (b.direction == Beam.LEFT || b.direction == Beam.RIGHT) b.rotateClockwise() else b.rotateAntiClockwise()
      DIAG_RL -> if (b.direction == Beam.LEFT || b.direction == Beam.RIGHT) b.rotateAntiClockwise() else b.rotateClockwise()
    }
  }
}

int sum = 0
for (int y in 0..<height) {
  for (int x in 0..<width) {
    if (beamHistory.any { Beam b -> b.x == x && b.y == y }) {
      sum++
      this[x, y] = `#` // TODO remove this
    }
  }
}

fun char putAt(int x, int y, char c) -> list[y * width + x] = c

//println(this)
println("Part 1: $sum")

class Beam {

  // TODO do enum on marcel
  static final int LEFT = 0
  static final int UP = 1
  static final int RIGHT = 2
  static final int DOWN = 3

  int x
  int y
  int direction

  constructor(this.x, this.y, this.direction)

  fun Beam copy() -> new Beam(x, y, direction)

  fun int hashCode() -> Integer.hashCode(x) * 31 + Integer.hashCode(y) * 31 + direction

  fun bool equals(Object o) {
    Beam b = o as Beam
    return b.x == x && b.y == y && b.direction == direction
  }

  fun void rotateClockwise() -> direction = (direction + 1) % 4
  fun void rotateAntiClockwise() -> direction = direction == 0 ? DOWN : direction - 1

  fun void move() {
    switch(direction) {
      // TODO marcel implement field increment
      LEFT -> x = x - 1
      RIGHT -> x = x + 1
      UP -> y = y - 1
      DOWN -> y = y + 1
    }
  }

  fun String toString() -> "Beam(x: $x, y: $y, direction: $direction)"
}

fun String toString() {
  StringBuilder builder = new StringBuilder()
  for (int i in 0..<height) {
    builder.append(list[(i * height)..<((i + 1) * height)])
      .append('\n')
  }
  return builder.toString()
}

fun char getAt(Beam b) -> list[b.y * width + b.x]
fun char getAt(int x, int y) -> list[y * width + x]
